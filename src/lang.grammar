@top Program { Block }

@skip { "," | space | comment }

Block { statement* }

statement {
  IfStatement[closedBy="end"] { if expression Block (else Block)? end} |
  TimesStatement[closedBy="end"] { ( Symbol | Number | Forever ) times Block end} |
  SetStatement { Symbol "=" expression } |
  expression
}

expression {
  Symbol |
  Boolean |
  String |
  Number |
  Null |
  CallExpression { Symbol "(" expression* ")" } |
  Function[closedBy="end"] { function "(" SymbolList ")" Block end}
}

SymbolList { Symbol* }
Symbol { identifier }

kw<term> { @specialize<identifier, term> }
if { kw<"if"> }
Forever { kw<"forever"> }
times { kw<"times"> }
else { kw<"else"> }
end { kw<"end"> }
function { kw<"function"> }

@tokens {
  space { std.whitespace+ }
  comment { "//" ![\n]* }
  identifierChar { std.asciiLetter }
  word { identifierChar (identifierChar | std.digit)* }
  identifier { word }

  Boolean { "true" | "false" }
  Number { std.digit+ }
  Null { "null" }
  String {
    '"' (![\\\n"] | "\\" _)* '"' |
    "'" (![\\\n'] | "\\" _)* "'"
  }

  @precedence { Boolean, Null, identifier }
}